/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_timer_classes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/timer-classes.js */ \"./src/js/modules/timer-classes.js\");\n// import { timerModule } from './modules/timer.js';\r\n\r\n\r\nconst timer1 = new _modules_timer_classes_js__WEBPACK_IMPORTED_MODULE_0__.CountdownTimer('.timer-1', 10);\r\ntimer1.initTimer();\r\n\r\n// date<string>\r\n// hours<number>\r\n// timerModule('January 16, 2023, 10:10:00', 'date');\r\n// timerModule(100, 'number');\r\n\n\n//# sourceURL=webpack://gulp-start/./src/js/app.js?");

/***/ }),

/***/ "./src/js/modules/timer-classes.js":
/*!*****************************************!*\
  !*** ./src/js/modules/timer-classes.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CountdownTimer\": () => (/* binding */ CountdownTimer)\n/* harmony export */ });\nconst SECONDS_IN_HOUR = 60 * 60;\r\nconst SECONDS_IN_MIN = 60;\r\nconst MS_IN_SECOND = 1000;\r\n\r\nconst fixNumber = (num) => ((num < 10) ? '0' + num : num.toString());\r\n\r\nclass SplitCountdownTimer {\r\n  SPLIT_CLASS_NAME = 'timer-number';\r\n  MAX_VALUE_SPLIT_TIMER = 99;\r\n\r\n  validateTimer(obj) {\r\n    if (obj.hours > this.MAX_VALUE_SPLIT_TIMER) {\r\n      throw new Error('The split timer value should not be more than 99');\r\n    }\r\n  }\r\n\r\n  splitUnit(unit, place) {\r\n    const splitUnites = unit.split('');\r\n    const splitItems = place.querySelectorAll(`.${this.SPLIT_CLASS_NAME}`);\r\n    const splitValue = [];\r\n\r\n    for (const [index, item] of splitItems.entries()) {\r\n      const splitNum = splitUnites[index];\r\n      splitValue.push(item.innerHTML);\r\n      setTimeout(() => {\r\n        if (splitValue.join('') !== unit) {\r\n          item.innerHTML = splitNum;\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  createSplitElements(places) {\r\n    const pattern = `\r\n    <span class=\"${this.SPLIT_CLASS_NAME}\"></span>\r\n    <span class=\"${this.SPLIT_CLASS_NAME}\"></span>`;\r\n\r\n    for (const item of places) {\r\n      if (item.firstElementChild === null) {\r\n        item.innerHTML = pattern;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass CountdownTimer {\r\n  constructor(className, inputTime, type = 1) {\r\n    this.inputTime = inputTime;\r\n    this.wrapper = document.querySelector(className);\r\n    this.isSplitTimer = this.wrapper.classList.contains('timer-split');\r\n    this.isTypeDate = (type === 0 || type === 'date');\r\n    this.isTypeNumber = (type === 1 || type === 'number');\r\n    if (this.isSplitTimer) this.splitTimer = new SplitCountdownTimer();\r\n  }\r\n\r\n  getElems() {\r\n    return [\r\n      this.wrapper.querySelector('.timer-hours'),\r\n      this.wrapper.querySelector('.timer-minutes'),\r\n      this.wrapper.querySelector('.timer-seconds'),\r\n    ];\r\n  }\r\n\r\n  getRemainingTime() {\r\n    return Math.floor(this.inputTime * SECONDS_IN_HOUR);\r\n  }\r\n\r\n  getRemainingTimeOnDate() {\r\n    const currentTime = new Date().getTime();\r\n    const countTime = new Date(this.inputTime).getTime();\r\n    const time = Math.floor((countTime - currentTime) / MS_IN_SECOND);\r\n    if (isNaN(time)) {\r\n      throw new Error('Invalid input value');\r\n    }\r\n    return time;\r\n  }\r\n\r\n  getTime(time) {\r\n    const obj = {\r\n      hours: Math.floor(time / SECONDS_IN_HOUR),\r\n      minutes: Math.floor((time % SECONDS_IN_HOUR) / SECONDS_IN_MIN),\r\n      seconds: time % SECONDS_IN_MIN,\r\n    };\r\n    this.isSplitTimer && this.splitTimer.validateTimer(obj);\r\n    return obj;\r\n  }\r\n\r\n  getFormattedTime(obj) {\r\n    const array = [];\r\n    for (const key of Object.keys(obj)) {\r\n      const item = obj[key];\r\n      array.push(fixNumber(item));\r\n    }\r\n    return array;\r\n  }\r\n\r\n  iterateTimer(time, callback) {\r\n    const units = this.getFormattedTime(time);\r\n    const timerElems = this.getElems();\r\n    for (let index = 0; index < timerElems.length; index++) {\r\n      const place = timerElems[index];\r\n      const unit = units[index];\r\n      callback(unit, place);\r\n    }\r\n  }\r\n\r\n  defaultInnerTimer(unit, place) {\r\n    if (place.innerHTML !== unit) {\r\n      place.innerHTML = unit;\r\n    }\r\n  }\r\n\r\n  insertTimerInHtml(time) {\r\n    const timerElems = this.getElems();\r\n    if (this.isSplitTimer) {\r\n      const splitUnit = this.splitTimer.splitUnit.bind(this.splitTimer);\r\n      this.splitTimer.createSplitElements(timerElems);\r\n      this.iterateTimer(time, splitUnit);\r\n    } else this.iterateTimer(time, this.defaultInnerTimer);\r\n  }\r\n\r\n  changePageTitle(units) {\r\n    const array = this.getFormattedTime(units);\r\n    const [hh, mm, ss] = array;\r\n    document.title = `${hh}:${mm}:${ss}`;\r\n  }\r\n\r\n  setRemainingTime() {\r\n    this.remainingTime = this.getRemainingTime();\r\n  }\r\n\r\n  setTimer(timer) {\r\n    if (this.isTypeDate) {\r\n      this.remainingTime = this.getRemainingTimeOnDate();\r\n    }\r\n    if (this.remainingTime < 0) {\r\n      clearInterval(timer);\r\n      return;\r\n    }\r\n    const time = this.getTime(this.remainingTime);\r\n    this.insertTimerInHtml(time);\r\n    this.changePageTitle(time);\r\n    if (this.isTypeNumber) this.remainingTime--;\r\n  }\r\n\r\n  insertBeforeStartTimer() {\r\n    if (this.isTypeDate) {\r\n      this.remainingTime = this.getRemainingTimeOnDate();\r\n    }\r\n    if (this.remainingTime < 0) {\r\n      this.remainingTime = 0;\r\n    }\r\n    const time = this.getTime(this.remainingTime);\r\n    this.insertTimerInHtml(time);\r\n  }\r\n\r\n  validateTimer() {\r\n    if (this.isTypeNumber) {\r\n      if (this.inputTime < 0) {\r\n        throw new Error('Input value is smaller than 0');\r\n      }\r\n      if (typeof inputTime === 'string') {\r\n        throw new Error('Invalid input value');\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  initTimer() {\r\n    if (!this.validateTimer()) return;\r\n    this.setRemainingTime();\r\n    this.insertBeforeStartTimer();\r\n    const timer = setInterval(() => {\r\n      this.setTimer.call(this, timer);\r\n    }, MS_IN_SECOND);\r\n  }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://gulp-start/./src/js/modules/timer-classes.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;